#include <GL/gl.h>
#include <GL/glu.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Point {
    int x, y;
};

vector<Point> polygon;
void findIntersections(const vector<Point>& poly, int scanLine, vector<int>& intersections) {
    intersections.clear();
    int n = poly.size();
    for (int i = 0; i < n; i++) {
        int x1 = poly[i].x;
        int y1 = poly[i].y;
        int x2 = poly[(i + 1) % n].x;
        int y2 = poly[(i + 1) % n].y;

        if ((y1 <= scanLine && y2 > scanLine) || (y2 <= scanLine && y1 > scanLine)) {
            int x = x1 + (scanLine - y1) * (x2 - x1) / (y2 - y1);
            intersections.push_back(x);
        }
    }
}

void scanLinePolygonFill(const vector<Point>& poly) {
    int ymin = poly[0].y, ymax = poly[0].y;
    for (const auto& p : poly) {
        ymin = min(ymin, p.y);
        ymax = max(ymax, p.y);
    }

    for (int scanLine = ymin; scanLine <= ymax; scanLine++) {
        vector<int> intersections;
        findIntersections(poly, scanLine, intersections);
        sort(intersections.begin(), intersections.end());
        glColor3f(0.0, 1.0, 0.0); // Green color for filling
        glBegin(GL_LINES);
        for (size_t i = 0; i < intersections.size(); i += 2) {
            glVertex2i(intersections[i], scanLine);
            glVertex2i(intersections[i + 1], scanLine);
        }
        glEnd();
    }
}
void drawPolygon(const vector<Point>& poly) {
    glColor3f(1.0, 0.0, 0.0); // Red color for the polygon edges
    glBegin(GL_LINE_LOOP);
    for (const auto& p : poly) {
        glVertex2i(p.x, p.y);
    }
    glEnd();
}
void mouseButtonCallback(GLFWwindow* window, int button, int action, int mods) {
    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS) {
        double xpos, ypos;
        glfwGetCursorPos(window, &xpos, &ypos);
        int x = static_cast<int>(xpos);
        int y = 500 - static_cast<int>(ypos); 
        polygon.push_back({ x, y });
    }
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    if (!polygon.empty()) {
        drawPolygon(polygon);
        scanLinePolygonFill(polygon);
    }
    glfwSwapBuffers(glfwGetCurrentContext());
}
void init() {
    glClearColor(1.0, 1.0, 1.0, 1.0); // White background
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 500, 0, 500); // Set the coordinate system
}
int main() {
    if (!glfwInit()) {
        cerr << "Failed to initialize GLFW" << endl;
        return -1;
    }
    GLFWwindow* window = glfwCreateWindow(500, 500, "Scan-Line Polygon Fill", NULL, NULL);
    if (!window) {
        cerr << "Failed to create GLFW window" << endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window); 
    glfwSetMouseButtonCallback(window, mouseButtonCallback);
    init();
    while (!glfwWindowShouldClose(window)) {
        display(); 
        glfwPollEvents();
    }

    glfwDestroyWindow(window); 
    glfwTerminate();
    return 0;
}
