import glfw
from OpenGL.GL import *
import numpy as np

# Window dimensions
WIDTH, HEIGHT = 800, 600

# Store polygon vertices
vertices = []
clipped_polygon = []

# Clipping window (rectangle)
clip_rect = [[200, 150], [600, 150], [600, 450], [200, 450]]

def init_window():
    if not glfw.init():
        raise Exception("GLFW could not be initialized")
    window = glfw.create_window(WIDTH, HEIGHT, "Sutherland-Hodgman Polygon Clipping", None, None)
    if not window:
        glfw.terminate()
        raise Exception("GLFW window could not be created")

    glfw.make_context_current(window)
    glOrtho(0, WIDTH, 0, HEIGHT, -1, 1)
    return window

def inside(point, edge_start, edge_end):
    """Check if a point is inside the clipping edge."""
    x, y = point
    x1, y1 = edge_start
    x2, y2 = edge_end
    return (x2 - x1) * (y - y1) - (y2 - y1) * (x - x1) >= 0

def intersection(p1, p2, edge_start, edge_end):
    """Calculate the intersection point between a line segment and a clipping edge."""
    x1, y1 = p1
    x2, y2 = p2
    x3, y3 = edge_start
    x4, y4 = edge_end

    # Line coefficients for both line segments
    den = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4)
    if den == 0:
        return None  # Lines are parallel or coincident

    t = ((x1 - x3) * (y3 - y4) - (y1 - y3) * (x3 - x4)) / den
    intersect_x = x1 + t * (x2 - x1)
    intersect_y = y1 + t * (y2 - y1)
    return [intersect_x, intersect_y]

def sutherland_hodgman_clip(polygon, clip_window):
    """Clip a polygon using the Sutherland-Hodgman algorithm."""
    output_list = polygon
    for i in range(len(clip_window)):
        input_list = output_list
        output_list = []

        edge_start = clip_window[i]
        edge_end = clip_window[(i + 1) % len(clip_window)]

        if not input_list:
            break

        s = input_list[-1]
        for e in input_list:
            if inside(e, edge_start, edge_end):
                if not inside(s, edge_start, edge_end):
                    output_list.append(intersection(s, e, edge_start, edge_end))
                output_list.append(e)
            elif inside(s, edge_start, edge_end):
                output_list.append(intersection(s, e, edge_start, edge_end))
            s = e

    return output_list

def draw_polygon(polygon, color):
    glColor3f(*color)
    glBegin(GL_LINE_LOOP)
    for vertex in polygon:
        glVertex2f(*vertex)
    glEnd()

def mouse_button_callback(window, button, action, mods):
    global vertices, clipped_polygon
    if button == glfw.MOUSE_BUTTON_LEFT and action == glfw.PRESS:
        x, y = glfw.get_cursor_pos(window)
        y = HEIGHT - y  # Invert y-axis to match OpenGL's coordinate system
        vertices.append([x, y])
        clipped_polygon = []  # Reset clipped polygon on new input

    if button == glfw.MOUSE_BUTTON_RIGHT and action == glfw.PRESS:
        clipped_polygon = sutherland_hodgman_clip(vertices, clip_rect)

def display(window):
    glClear(GL_COLOR_BUFFER_BIT)
    glLineWidth(2)

    if vertices:
        draw_polygon(vertices, (1, 1, 1))  # White color for original polygon

    if clipped_polygon:
        draw_polygon(clipped_polygon, (1, 0, 0))  # Red color for clipped polygon

    # Draw clipping rectangle
    glColor3f(0, 1, 0)  # Green color for clipping boundary
    glBegin(GL_LINE_LOOP)
    for corner in clip_rect:
        glVertex2f(*corner)
    glEnd()

    glfw.swap_buffers(window)

def main():
    window = init_window()

    glfw.set_mouse_button_callback(window, mouse_button_callback)

    while not glfw.window_should_close(window):
        glfw.poll_events()
        display(window)

    glfw.terminate()

if __name__ == "__main__":
    main()
